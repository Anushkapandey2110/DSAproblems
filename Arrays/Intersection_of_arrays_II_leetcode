Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000
 

Follow up:

What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?
solution:
vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {

        vector <int> arr;
       //two pointers
        sort(nums1.begin() , nums1.end());
        sort(nums2.begin() , nums2.end());
        int i=0,j=0;//two pointers
        while(i < nums1.size() && j < nums2.size() )
        {
            if(nums1[i] < nums2[j])
            i++;
            else if(nums1[i] > nums2[j])
            j++;
            else
            {
                arr.push_back(nums1[i]);
                i++;
                j++;
            }
        }
        return arr;
        
        // hashing
        unordered_map <int,int> hash;
        if(nums1.size() <= nums2.size()) //if condition is being used so that hashing takes less time since however long the size of one array is when it comes to intersection , the element should be present in both the arrays hence hashing the smaller array and then checking for the common in longer array would be a much better choice and would save time
        {
            for(int i = 0; i< nums1.size(); i++)
            {
                hash[nums1[i]]++;
            }
            for( int j =0;j<nums2.size() ; j++)
            {
                if(hash.find(nums2[j]) != hash.end() && hash[nums2[j]] > 0)
                {
                    arr.push_back(nums2[j]);
                    hash[nums2[j]]--;
                }
            }
        }

           else if (nums1.size()>nums2.size())
        {
            for(int i = 0; i < nums2.size(); i++)
            {
                hash[nums2[i]]++;
            }
            for( int j =0;j < nums1.size() ; j++)
            {
                if(hash.find(nums1[j]) != hash.end() && hash[nums1[j]] > 0)
                {
                    arr.push_back(nums1[j]);
                    hash[nums1[j]]--;
                }
            }
        }
        return arr;
    }
    
