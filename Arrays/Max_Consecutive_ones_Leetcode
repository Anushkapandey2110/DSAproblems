description:
Given a binary array nums, return the maximum number of consecutive 1's in the array.

 

Example 1:

Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
Example 2:

Input: nums = [1,0,1,1,0,1]
Output: 2
 

Constraints:

1 <= nums.length <= 10^5
nums[i] is either 0 or 1.
solution
//brute force O(N^2)
int findMaxConsecutiveOnes(vector<int>& nums) {
        int j=0;
        int cnt=0;
        int maxcnt=0;
        for(int i=0;i<nums.size();i++)
        {
            cnt=0;
            if(nums[i]==1)
            {
                j=i;
                while(nums[j]==1 && j < nums.size())
                {
                    if(j == nums.size()-1)
                    {
                        cnt+=1;
                        break;
                    }
                    cnt++;
                    j++;
                    
                }
            }
            if(cnt > maxcnt)
            maxcnt=cnt;
            
        }
        return maxcnt;
        
    }
};

//optimal O(N)
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int cnt=0;
        int maxcnt=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i] == 1)
            {
                cnt ++;
                if(cnt > maxcnt)
                maxcnt=cnt;
            }
            if(nums[i]==0)
            cnt=0;
        }
        return maxcnt;
    }
};
