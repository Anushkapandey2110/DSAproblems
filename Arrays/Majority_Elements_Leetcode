description:
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 10^4
-10^9 <= nums[i] <= 10^9
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

solution:
//brute force
class Solution {
public:
//better
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> freq;
        for(int i=0;i<nums.size();i++)
        {
            freq[nums[i]]++;
        }
        int max=0;
        for(auto it : freq)
        {
            if(it.second > nums.size()/2)
            max=it.first;
        }
        return max;
    }
};

//optimal
//Moore's Voting Algorithm 
  int majorityElement(vector<int>& nums) {
       int cnt=0;
       int ele=0;
       int res;
       for(int i=0;i<nums.size();i++)
       {
            if(cnt == 0)
            {
                ele=nums[i];
                cnt=1;
            }
            else if(ele == nums[i])
            cnt++;
            else 
            cnt--;
       }
    
    return ele;
       
    }
