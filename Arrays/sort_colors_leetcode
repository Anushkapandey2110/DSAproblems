description:
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?

(brute force:sorting using any of the sorting algos)
solution:
//better 
public:
    void sortColors(vector<int>& nums) {
        int c0=0;
        int c1=0;
        int c2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i] == 0)
            c0++;
            else if(nums[i] == 1)
            c1++;
            else if(nums[i] == 2)
            c2++;
        }
        for(int j=0;j<c0;j++)
        {
            nums[j]=0;
        }
         for(int j=c0;j<c1+c0;j++)
        {
            nums[j]=1;
        }
         for(int j=c1+c0;j<c2+c1+c0;j++)
        {
            nums[j]=2;
        }
    }
optimal:
class Solution {
public:
//this is a Dutch National Flag (DNF) algo, in which we take three pointerslow,mid and high
//there are three rules : 1. form index 0 to low-1  , all entries will be zero(extreme left)
//2.from low to mid-1 there will be 1s
//3. from high+1 to n-1 there will be 2s(extreme right )
//this leaves us with an unsorted portion of mid to high , we will have to sort this
//for sorting we operated with either arr[mid] or arr[high] and we aim on shrinking the mid to high region till all of the array is sorted
    void sortColors(vector<int>& nums) {
        int low=0;
        int mid=0;
        int high =nums.size()-1;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[mid] == 0)
            {
                swap(nums[low],nums[mid]);
                mid++;
                low++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else if(nums[mid] == 2)
            {
                swap(nums[mid],nums[high]);
                high--;
            }
        }
     
    }
};
