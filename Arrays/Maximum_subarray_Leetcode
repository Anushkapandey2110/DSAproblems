description:
Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

solution:
class Solution {
public:
//optimal approach:Kadane's algorithm 
    int maxSubArray(vector<int>& nums) {
        int sum=0;
        int max_sum=INT_MIN;
        int start =0 ; int stop=0; // to keep track of the index of the subarray having the max sum
        int final_start=0;
        
        for(int i=0;i<nums.size();i++)
        {
            if(sum == 0)
            start=i;//we know that each time we start considering a new subarray, the sum is zero 
            
            sum+=nums[i];
            if(sum<0)
            {
                sum=0; //taking negative number ahead as a sum will decrease the sum further and we have to find the max sum so no use 
                
            }


            if(sum>max_sum)
            {
            max_sum=sum;
            stop=i; //the index at which the sum exceeds the max_sum is the stopping index of the subarray
            final_start=start;

            }
        }
        cout << final_start<< " "<<stop;
        return max_sum;
        
        
    }
};
