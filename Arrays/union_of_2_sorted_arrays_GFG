description:
Given two sorted arrays of size n and m respectively, find their union. The Union of two arrays can be defined as the common and distinct elements in the two arrays. Return the elements in sorted order.

Example 1:

Input: 
n = 5, arr1[] = {1, 2, 3, 4, 5}  
m = 5, arr2 [] = {1, 2, 3, 6, 7}
Output: 
1 2 3 4 5 6 7
Explanation: 
Distinct elements including both the arrays are: 1 2 3 4 5 6 7.
Example 2:

Input: 
n = 5, arr1[] = {2, 2, 3, 4, 5}  
m = 5, arr2[] = {1, 1, 2, 3, 4}
Output: 
1 2 3 4 5
Explanation: 
Distinct elements including both the arrays are: 1 2 3 4 5.
Example 3:

Input:
n = 5, arr1[] = {1, 1, 1, 1, 1}
m = 5, arr2[] = {2, 2, 2, 2, 2}
Output: 
1 2
Explanation: 
Distinct elements including both the arrays are: 1 2.
Your Task: 
You do not need to read input or print anything. Complete the function findUnion() that takes two arrays arr1[], arr2[], and their size n and m as input parameters and returns a list containing the union of the two arrays.

Expected Time Complexity: O(n+m).
Expected Auxiliary Space: O(n+m).

Constraints:
1 <= n, m <= 10^5
-10^9 <= arr1[i], arr2[i] <= 10^9
solution:
vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        int i=0;//pointer for array1
        int j=0;//pointer for array2
        vector <int> unionarr;
        while (i!=n && j!=m)
        {
            if(arr1[i] <= arr2[j])
            {
            if(unionarr.size() == 0 || unionarr.back()!=arr1[i])
            {
                unionarr.push_back(arr1[i]);
               
            }
            i++;
            
            
            }
            else
            {
                if(unionarr.size() == 0 || unionarr.back() !=arr2[j])
                {
                    unionarr.push_back(arr2[j]);
                   
                }
                j++;
            }
        } //this while loop will end the moment any one of the array is compleely traversed so we will have to add the rest of the elements of the other array 
        while (i < n)
        {
            if(unionarr.size() == 0 || unionarr.back()!=arr1[i])
            {
                unionarr.push_back(arr1[i]);
               
            }
            i++;
        }
        while (j < m)
        {
            if(unionarr.size() == 0 || unionarr.back() !=arr2[j])
                {
                    unionarr.push_back(arr2[j]);
                   
                }
                j++;
        }
        return unionarr;
    }
