description:
Given an array arr of size n of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7.

Examples:

Input: 
n = 6, arr = [5, 2, 3, 10, 6, 8], sum = 10
Output: 
3
Explanation: 
{5, 2, 3}, {2, 8}, {10} are possible subsets.
Input: 
n = 5, arr = [2, 5, 1, 4, 3], sum = 10
Output: 
3
Explanation: 
{2, 1, 4, 3}, {5, 1, 4}, {2, 5, 3} are possible subsets.

Expected Time Complexity: O(n*sum)
Expected Auxiliary Space: O(n*sum)

Constraints:
1 ≤ n*sum ≤ 106
0 ≤ arr[i] ≤ 106
solution:
//this will give TLE but this is an important recursive approach
int subseq(int ind, int arr[], int n, int sum, int sum1)
	{
	   if(sum1 > sum)
	   return 0;
	    if(ind == n)
	    {
	        if(sum1 == sum)
	        
	        return 1;
	        return 0;
	    }
	    sum1+=arr[ind];
	   int l= subseq(ind+1,arr,n,sum,sum1);
	    sum1-=arr[ind];
	    int r=subseq(ind+1,arr,n,sum,sum1);
        return l+r;	    
	    
	    
	}
	
	int perfectSum(int arr[], int n, int sum )
	{
        int sum1=0;
        int count = subseq(0,arr,n,sum,sum1);
        
        return count;
	}
