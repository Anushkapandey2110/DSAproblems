//it gives TLE fdr large input but it is an important pattern

description:
Problem statement
You are given an array 'A' of 'N' integers. You have to return true if there exists a subset of elements of 'A' that sums up to 'K'. Otherwise, return false.



For Example
'N' = 3, 'K' = 5, 'A' = [1, 2, 3].
Subset [2, 3] has sum equal to 'K'.
So our answer is True.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
4 13
4 3 5 2
Sample Output 1 :
No
Sample Input 2 :
5 14
4 2 5 6 7
Sample Output 2 :
Yes
Constraints :
1 <= 'N' <= 10^3
1 <= 'A[i]' <= 10^3
1 <= 'K' <= 10^3
Time Limit: 1 sec
solution:
bool subset(int n, int k, int s, int ind, vector<int> &a)
{
    if(ind == a.size() )
    {
      if (s == k) 
        return true;
        return false;
      
    }

        s+=a[ind];//take
        if(subset(n, k, s, ind+1, a) == true)
        return true;
        s-=a[ind];//not take
        if(subset(n, k, s, ind+1, a) == true)
        return true;
        return false;
    
}
bool isSubsetPresent(int n, int k, vector<int> &a)
{
    int s=0;
    bool result = subset(n, k, s, 0, a);
    return result;
    
}
