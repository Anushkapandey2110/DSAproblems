description:
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

  solution:
public:

    void unique( vector<int>& candidates, int target , vector<int> &comb, int ind,vector<vector<int>> &result)
    {
            if(target == 0)
            {
            result.push_back(comb);
            
            return;
            }
        
        
        for(int i=ind; i < candidates.size(); i++)
        {
            if(i>ind && candidates[i] == candidates[i-1])
            continue;
            if(candidates[i]>target)
            break;
            comb.push_back(candidates[i]);
            unique(candidates,target-candidates[i],comb,i+1,result);
            comb.pop_back();

        }

    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> comb;
        vector<vector<int>> result;
        sort(candidates.begin(),candidates.end());
        unique(candidates, target, comb, 0, result);
        return result;
        
    }
