description:
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-10^4 <= x^n <= 10^4


class Solution {
public:
//brute force 
    double myPow(double x, int n) {
        double result;
        long nn = n;
        if( nn < 0)
         nn = nn *-1;
        for(int i =0;i<nn ;i++)
        {
            result = result *i;

    }

 if(n<0)
return 1/result;
return result;
}    // tc: O(N)
};

public:
    double myPow(double x, int n) {
        double result = 1.0;
       long long nn=n;
       if( nn <0 )
       nn = -1 * nn;
       while(nn)
       {
        if( nn % 2 == 0)
        {
            x = x*x;
            nn=nn/2;
        }
        else 
        {
            result = result * x;
            nn = nn-1;

        }
        
       }
       if(n < 0 )
       return double(1.0)/double(result);
       return result; // TC:O(log(N)) since it is being divided by 2
    }
};
