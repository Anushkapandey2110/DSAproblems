description:
Given an array arr containing n integers and an integer k. Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value k.

 

Examples:
 

Input :
arr[] = {10, 5, 2, 7, 1, 9}, k = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.
Input : 
arr[] = {-1, 2, 3}, k = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).

 

Constraints:
1<=n<=10^5
-10^5<=arr[i], K<=10^5
solution:
public:
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        unordered_map<int,int> PresumMap;
        int sum=0;
        int rem=0;
        int maxlen=0;
        for(int i=0;i<N;i++)
        {
            sum+=A[i];
            if(sum == K)
            maxlen = max(maxlen,i+1);
            rem = sum-K;
            if(PresumMap.find(rem) != PresumMap.end())
            {
            int len = i-PresumMap[rem];
            maxlen = max(maxlen, len);
             }
            if(PresumMap.find(sum) == PresumMap.end())
            PresumMap[sum]=i;
        }
        return maxlen;
    } 
